#!/usr/bin/env python
# -*- coding: utf-8 -*-
import ConfigParser

# for reusing the module docstring
docstring = 'Execute CircleCI REST API commands from the CLI.'
__doc__ = docstring

SECTION_NAME = 'circlecli'


def read_config(config_file):
    """Load saved configuration parameters.

    Args:
        config_file (str): the path to the configuration file

    Returns:
        (dict) the configuration values
    """
    cp = ConfigParser.SafeConfigParser()
    cp.read(config_file)

    # build the config object
    config = {}
    try:
        [config.setdefault(k, v) for k, v in cp.items(SECTION_NAME)]
    except ConfigParser.NoSectionError:
        print("No previous configuration found.")

    return config


def init_config(config_path):
    """Initialize configuration or create new one."""
    config = read_config(config_path)
    if not config.get('token'):
        # read new token
        print("Enter your CircleCI API token at the prompt (https://circleci.com/account/api).")
        config['token'] = raw_input("Token: ").strip()

        # ask other questions since we're here
        if not config.get('default_username'):
            print("")
            print("A default username ensures you don't have to specify one for every command.")
            print("(e.g., /api/v1/project/:default_username/:project)")
            config['default_username'] = raw_input("Default username (leave blank for none): ").strip()

            # write new config
            config_fp = open(config_path, 'w')
            cp = ConfigParser.SafeConfigParser()
            cp.add_section(SECTION_NAME)
            cp.set(SECTION_NAME, 'token', config['token'])
            cp.set(SECTION_NAME, 'default_username', config['default_username'])
            cp.write(config_fp)
            config_fp.close()

    return config


if __name__ == "__main__":
    import argparse
    from os import path as op

    # read the config
    config = init_config(op.join(op.expanduser("~"), '.circleci.ini'))

    # parse command line args
    parser = argparse.ArgumentParser(description=docstring,
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('command', action='store',
                        help="One of the following commands:\n"
                             "\tlist\n"
                             "\tadd\n"
                             "\tdelete\n"
                             "\tretry\n"
                             "\tcancel")
    parser.add_argument('--project', '-p', dest='project', action='store',
                        help="The target project name")
    parser.add_argument('--username', '-u', dest='username', action='store',
                        default=config['default_username'],
                        help="The username of the project/repo owner")
    parser.add_argument('--build-num', '-b', dest='build_num', action='store',
                        type=int, help="The target build number")

    args = parser.parse_args()

    # run the command
    for arg in vars(args):
        print("{}: {}".format(arg, getattr(args, arg)))