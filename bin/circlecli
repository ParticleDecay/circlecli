#!/usr/bin/env python
# -*- coding: utf-8 -*-
import ConfigParser

# for reusing the module docstring
docstring = 'Execute CircleCI REST API commands from the CLI.'
__doc__ = docstring

SECTION_NAME = 'circlecli'


def read_config(config_file):
    """Load saved configuration parameters.

    Args:
        config_file (str): the path to the configuration file

    Returns:
        (dict) the configuration values
    """
    cp = ConfigParser.SafeConfigParser()
    cp.read(config_file)

    # build the config object
    config = {}
    try:
        [config.setdefault(k, v) for k, v in cp.items(SECTION_NAME)]
    except ConfigParser.NoSectionError:
        print("No previous configuration found.")

    return config


def init_config(config_path):
    """Initialize configuration or create new one."""
    config = read_config(config_path)
    if not config.get('token'):
        # read new token
        print("Enter your CircleCI API token at the prompt (https://circleci.com/account/api).")
        config['token'] = raw_input("Token: ").strip()

        # ask other questions since we're here
        if not config.get('default_username'):
            print("")
            print("A default username ensures you don't have to specify one for every command.")
            print("(e.g., /api/v1/project/:default_username/:project)")
            config['default_username'] = raw_input("Default username (leave blank for none): ").strip()

            # write new config
            config_fp = open(config_path, 'w')
            cp = ConfigParser.SafeConfigParser()
            cp.add_section(SECTION_NAME)
            cp.set(SECTION_NAME, 'token', config['token'])
            cp.set(SECTION_NAME, 'default_username', config['default_username'])
            cp.write(config_fp)
            config_fp.close()

    return config


if __name__ == "__main__":
    import argparse
    import sys
    from os import path as op

    from src.circle import CircleAPI

    # read the config
    config = init_config(op.join(op.expanduser("~"), '.circlecli.ini'))

    # parse command line args
    parser = argparse.ArgumentParser(description=docstring,
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('action', action='store', nargs='?',
                        help="One of the following actions:\n"
                             "\tme\n"
                             "\tprojects\n")
    parser.add_argument('--project', '-p', dest='project', action='store',
                        help="The target project name")
    parser.add_argument('--username', '-u', dest='username', action='store',
                        default=config['default_username'],
                        help="The username of the project/repo owner")
    parser.add_argument('--build-num', '-b', dest='build_num', action='store',
                        type=int, help="The target build number")
    parser.add_argument('--config', '-c', dest='config', action='store_true',
                        default=False, help="Only print saved configuration values")
    parser.add_argument('--verbose', '-v', dest='verbose', action='store_true',
                        default=False, help="Include full output from CircleCI (not the default filtered version)")
    parser.add_argument('--set', '-s', dest='envvars', action='append',
                        default=[], help="Set a variable (used with 'env' command)")

    args = parser.parse_args()

    if args.config:
        for k, v in config.iteritems():
            print("{} = {}".format(k, v))
        sys.exit(0)

    # required args
    if not args.action:
        parser.error("you must specify an action")

    circle = CircleAPI(config['token'])
    if args.action == 'me':
        res = circle.me(args.verbose)
        if not args.verbose:
            for k, v in res.iteritems():
                print("{}: {}".format(k, v))
        else:
            print(res)
    elif args.action == 'projects':
        res = circle.projects(args.verbose)
        if not args.verbose:
            for k in res:
                print(k)
        else:
            print(res)
    elif args.action == 'builds':
        if args.project and not args.username:
            parser.error("username (-u) is required")
        res = circle.builds(username=args.username, project=args.project,
                            build_num=args.build_num, verbose=args.verbose)
        if not args.verbose:
            for build in res:
                for k, v in build.iteritems():
                    print("{}: {}".format(k, v))
                print("")
        else:
            print(res)
    elif args.action == 'artifacts':
        if args.project and not args.username:
            parser.error("username (-u) is required")
        if not args.build_num:
            parser.error("build-num (-b) is required")
        res = circle.artifacts(username=args.username, project=args.project,
                               build_num=args.build_num, verbose=args.verbose)
        if not args.verbose:
            for k in res:
                print(k)
        else:
            print(res)
    elif args.action == 'retry':
        if args.project and not args.username:
            parser.error("username (-u) is required")
        if not args.build_num:
            parser.error("build-num (-b) is required")
        res = circle.retry_build(username=args.username, project=args.project,
                                 build_num=args.build_num, verbose=args.verbose)
        print(res)
    elif args.action == 'add-key':
        if args.project and not args.username:
            parser.error("username (-u) is required")
        if not args.build_num:
            parser.error("build-num (-b) is required")
        res = circle.ssh_users(username=args.username, project=args.project,
                               build_num=args.build_num, verbose=args.verbose)
        if not args.verbose:
            for k, v in res.iteritems():
                print("{}: {}".format(k, v))
        else:
            print(res)
    elif args.action == 'clear-cache':
        if args.project and not args.username:
            parser.error("username (-u) is required")
        if not args.build_num:
            parser.error("build-num (-b) is required")
        res = circle.clear_cache(username=args.username, project=args.project,
                                 build_num=args.build_num, verbose=args.verbose)
        if not args.verbose:
            for k, v in res.iteritems():
                print("{}: {}".format(k, v))
        else:
            print(res)
    elif args.action == 'env':
        if args.project and not args.username:
            parser.error("username (-u) is required")
        envvars = {}
        for envvar in args.envvars:
            if "=" in envvar:
                name, value = envvar.split("=")
                envvars[name] = value
        res = circle.envvar(username=args.username, project=args.project,
                            verbose=args.verbose, **envvars)
        if not args.verbose:
            for var in res:
                print(var)
        else:
            print(res)
    else:
        print("Unknown action: {}".format(args.action))